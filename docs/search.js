window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "optionlab", "modulename": "optionlab", "kind": "module", "doc": "<h2 id=\"optionlab-is\">OptionLab is...</h2>\n\n<p>... a Python library designed as a research tool for quickly evaluating options \nstrategy ideas. It is intended for a wide range of users, from individuals learning \nabout options trading to developers of quantitative strategies.</p>\n\n<p><strong>OptionLab</strong> calculations can produce a number of useful outputs:</p>\n\n<ul>\n<li><p>the profit/loss profile of the strategy on a user-defined target date,</p></li>\n<li><p>the range of stock prices for which the strategy is profitable,</p></li>\n<li><p>the Greeks associated with each leg of the strategy,</p></li>\n<li><p>the resulting debit or credit on the trading account,</p></li>\n<li><p>the maximum and minimum returns within a specified lower and higher price range \nof the underlying asset, </p></li>\n<li><p>the expected profit and expected loss, and</p></li>\n<li><p>an estimate of the strategy's probability of profit.</p></li>\n</ul>\n\n<p>The probability of profit (PoP) of the strategy on the user-defined target date<br />\nis calculated by default using the Black-Scholes model. The user can alternatively \nprovide an array of underlying asset prices obtained elsewhere (e.g. from the \nHeston model, a Laplace distribution or a Machine Learning/Deep Learning model) \nto be used in the calculations instead of the Black-Scholes model. This allows \n<strong>OptionLab</strong> to function as a calculator using custom models.</p>\n\n<p>An advanced feature of <strong>OptionLab</strong> that provides great flexibility in building \ncomplex dynamic strategies is the ability to include previously created positions \nas legs in a new strategy. Popular strategies that can benefit from this feature \ninclude the Wheel and Covered Call strategies.</p>\n\n<h2 id=\"optionlab-is-not\">OptionLab is not...</h2>\n\n<p>... a platform for direct order execution. This capability has not been and \nprobably will not be implemented.</p>\n\n<p>Backtesting and trade simulation using Monte Carlo have also not (yet) been \nimplemented in the API.</p>\n\n<p>That being said, nothing prevents <strong>OptionLab</strong> from being integrated into an \noptions quant trader's workflow alongside other tools.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>The easiest way to install <strong>OptionLab</strong> is using <strong>pip</strong>:</p>\n\n<pre><code>pip install optionlab\n</code></pre>\n\n<h2 id=\"quickstart\">Quickstart</h2>\n\n<p><strong>OptionLab</strong> is designed with ease of use in mind. An options strategy can be \ndefined and evaluated with just a few lines of Python code. The API is streamlined, \nand the learning curve is minimal.</p>\n\n<p>The evaluation of a strategy is done by calling the <code>optionlab.engine.run_strategy</code> \nfunction provided by the library. This function receives the input data either \nas a dictionary or an <code>optionlab.models.Inputs</code> object.</p>\n\n<p>For example, let's say we wanted to calculate the probability of profit for naked \ncalls on Apple stocks expiring on December 17, 2021. The strategy setup consisted \nof selling 100 175.00 strike calls for 1.15 each on November 22, 2021.</p>\n\n<p>The input data for this strategy can be provided in a dictionary as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;stock_price&quot;</span><span class=\"p\">:</span> <span class=\"mf\">164.04</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;start_date&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2021-11-22&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;target_date&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2021-12-17&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;volatility&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.272</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;interest_rate&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.0002</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;min_stock&quot;</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;max_stock&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;strategy&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;strike&quot;</span><span class=\"p\">:</span> <span class=\"mf\">175.0</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;premium&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.15</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;n&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;action&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;sell&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Alternatively, the input data could be defined as the <code>optionlab.models.Inputs</code> \nobject below:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">optionlab</span> <span class=\"kn\">import</span> <span class=\"n\">Inputs</span>\n\n<span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"n\">Inputs</span><span class=\"p\">(</span>\n    <span class=\"n\">stock_price</span> <span class=\"o\">=</span> <span class=\"mf\">164.04</span><span class=\"p\">,</span>\n    <span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;2021-11-22&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">target_date</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;2021-12-17&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">volatility</span> <span class=\"o\">=</span> <span class=\"mf\">0.272</span><span class=\"p\">,</span>\n    <span class=\"n\">interest_rate</span> <span class=\"o\">=</span> <span class=\"mf\">0.0002</span><span class=\"p\">,</span>\n    <span class=\"n\">min_stock</span> <span class=\"o\">=</span> <span class=\"mi\">120</span><span class=\"p\">,</span>\n    <span class=\"n\">max_stock</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;strike&quot;</span><span class=\"p\">:</span> <span class=\"mf\">175.0</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;premium&quot;</span><span class=\"p\">:</span> <span class=\"mf\">1.15</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;n&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;action&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;sell&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>In both cases, the strategy itself is a list of dictionaries, where each dictionary\ndefines a leg in the strategy. The fields in a leg, depending on the type of the\nleg, are described in <code>optionlab.models.Stock</code>, <code>optionlab.models.Option</code>, and\n<code>optionlab.models.ClosedPosition</code>.</p>\n\n<p>After defining the input data, we pass it to the <code>run_strategy</code> function as shown \nbelow:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">optionlab</span> <span class=\"kn\">import</span> <span class=\"n\">run_strategy</span><span class=\"p\">,</span> <span class=\"n\">plot_pl</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">run_strategy</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n\n<span class=\"n\">plot_pl</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The variable <code>out</code> is an <code>optionlab.models.Outputs</code> object that contains the \nresults from the calculations. By calling <code>print</code> with <code>out</code> as an argument, \nthese results are displayed on screen. </p>\n\n<p>The <code>optionlab.plot.plot_pl</code> function, in turn, takes an <code>optionlab.models.Outputs</code> \nobject as its argument and plots the profit/loss diagram for the strategy.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>Examples for a number of popular options trading strategies can be found as \nJupyter notebooks in the <a href=\"https://github.com/rgaveiga/optionlab/tree/main/examples\">examples</a> \ndirectory.</p>\n"}, {"fullname": "optionlab.VERSION", "modulename": "optionlab", "qualname": "VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1.4.3&#x27;"}, {"fullname": "optionlab.black_scholes", "modulename": "optionlab.black_scholes", "kind": "module", "doc": "<p>This module defines functions that calculate quantities, such as option prices\nand the Greeks, related to the Black-Scholes model.</p>\n"}, {"fullname": "optionlab.black_scholes.get_bs_info", "modulename": "optionlab.black_scholes", "qualname": "get_bs_info", "kind": "function", "doc": "<p>Provides information about call and put options calculated using the Black-Scholes\nformula.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s</code>: stock price.</p>\n\n<p><code>x</code>: strike price(s).</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>vol</code>: annualized volatility.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Information calculated using the Black-Scholes formula.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">vol</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BlackScholesInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_option_price", "modulename": "optionlab.black_scholes", "qualname": "get_option_price", "kind": "function", "doc": "<p>Returns the price of an option.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>s0</code>: spot price(s) of the underlying asset.</p>\n\n<p><code>x</code>: strike price(s).</p>\n\n<p><code>r</code>: annualize risk-free interest rate.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>d1</code>: <code>d1</code> in Black-Scholes formula.</p>\n\n<p><code>d2</code>: <code>d2</code> in Black-Scholes formula.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option price(s).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">d1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_delta", "modulename": "optionlab.black_scholes", "qualname": "get_delta", "kind": "function", "doc": "<p>Returns the option's Greek Delta.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>d1</code>: <code>d1</code> in Black-Scholes formula.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option's Greek Delta.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">d1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_gamma", "modulename": "optionlab.black_scholes", "qualname": "get_gamma", "kind": "function", "doc": "<p>Returns the option's Greek Gamma.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s0</code>: spot price of the underlying asset.</p>\n\n<p><code>vol</code>: annualized volatitily.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>d1</code>: <code>d1</code> in Black-Scholes formula.</p>\n\n<p><code>y</code>: annualized divident yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option's Greek Gamma.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">vol</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">d1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_theta", "modulename": "optionlab.black_scholes", "qualname": "get_theta", "kind": "function", "doc": "<p>Returns the option's Greek Theta.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>s0</code>: spot price of the underlying asset.</p>\n\n<p><code>x</code>: strike price(s).</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>vol</code>: annualized volatility.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>d1</code>: <code>d1</code> in Black-Scholes formula.</p>\n\n<p><code>d2</code>: <code>d2</code> in Black-Scholes formula.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option's Greek Theta.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">vol</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">d1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_vega", "modulename": "optionlab.black_scholes", "qualname": "get_vega", "kind": "function", "doc": "<p>Returns the option's Greek Vega.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s0</code>: spot price of the underlying asset.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>d1</code>: <code>d1</code> in Black-Scholes formula.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option's Greek Vega.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">d1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_rho", "modulename": "optionlab.black_scholes", "qualname": "get_rho", "kind": "function", "doc": "<p>Returns the option's Greek Rho.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>x</code>: strike price(s).</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>d2</code>: <code>d2</code> in Black-Scholes formula.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option's Greek Rho.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_d1", "modulename": "optionlab.black_scholes", "qualname": "get_d1", "kind": "function", "doc": "<p>Returns <code>d1</code> used in Black-Scholes formula.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s0</code>: spot price(s) of the underlying asset.</p>\n\n<p><code>x</code>: strike price(s).</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>vol</code>: annualized volatility(ies).</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>y</code>: annualized divident yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>d1</code> in Black-Scholes formula.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">vol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_d2", "modulename": "optionlab.black_scholes", "qualname": "get_d2", "kind": "function", "doc": "<p>Returns <code>d2</code> used in Black-Scholes formula.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s0</code>: spot price(s) of the underlying asset.</p>\n\n<p><code>x</code>: strike price(s).</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>vol</code>: annualized volatility(ies).</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>y</code>: annualized divident yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>d2</code> in Black-Scholes formula.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">vol</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_implied_vol", "modulename": "optionlab.black_scholes", "qualname": "get_implied_vol", "kind": "function", "doc": "<p>Returns the implied volatility of an option.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>oprice</code>: market price of an option.</p>\n\n<p><code>s0</code>: spot price of the underlying asset.</p>\n\n<p><code>x</code>: strike price.</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Option's implied volatility.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">oprice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.black_scholes.get_itm_probability", "modulename": "optionlab.black_scholes", "qualname": "get_itm_probability", "kind": "function", "doc": "<p>Returns the probability(ies) that the option(s) will expire in-the-money (ITM).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>d2</code>: <code>d2</code> in Black-Scholes formula.</p>\n\n<p><code>years_to_maturity</code>: time remaining to maturity, in years.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Probability(ies) that the option(s) will expire in-the-money (ITM).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">d2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">years_to_maturity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.engine", "modulename": "optionlab.engine", "kind": "module", "doc": "<p>This module defines the <code>run_strategy</code> function.</p>\n\n<p>Given input data provided as either an <code>optionlab.models.Inputs</code> object or a dictionary,\n<code>run_strategy</code> returns the results of an options strategy calculation (e.g., the\nprobability of profit on the target date) as an <code>optionlab.models.Outputs</code> object.</p>\n"}, {"fullname": "optionlab.engine.run_strategy", "modulename": "optionlab.engine", "qualname": "run_strategy", "kind": "function", "doc": "<p>Runs the calculation for a strategy.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>inputs_data</code>: input data used in the strategy calculation.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Output data from the strategy calculation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inputs_data</span><span class=\"p\">:</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Inputs</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Outputs</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.models", "modulename": "optionlab.models", "kind": "module", "doc": "<p>This module primarily implements Pydantic models that represent inputs and outputs \nof strategy calculations. It also implements constants and custom types.</p>\n\n<p>From the user's point of view, the two most important classes that they will use \nto provide input and subsequently process calculation results are <code>Inputs</code> and \n<code>Outputs</code>, respectively.</p>\n"}, {"fullname": "optionlab.models.OptionType", "modulename": "optionlab.models", "qualname": "OptionType", "kind": "variable", "doc": "<p>Option type in a strategy leg.</p>\n", "default_value": "typing.Literal[&#x27;call&#x27;, &#x27;put&#x27;]"}, {"fullname": "optionlab.models.Action", "modulename": "optionlab.models", "qualname": "Action", "kind": "variable", "doc": "<p>Action taken in in a strategy leg.</p>\n", "default_value": "typing.Literal[&#x27;buy&#x27;, &#x27;sell&#x27;]"}, {"fullname": "optionlab.models.StrategyLegType", "modulename": "optionlab.models", "qualname": "StrategyLegType", "kind": "variable", "doc": "<p>Type of strategy leg.</p>\n", "default_value": "typing.Union[typing.Literal[&#x27;stock&#x27;], typing.Literal[&#x27;call&#x27;, &#x27;put&#x27;], typing.Literal[&#x27;closed&#x27;]]"}, {"fullname": "optionlab.models.TheoreticalModel", "modulename": "optionlab.models", "qualname": "TheoreticalModel", "kind": "variable", "doc": "<p>Theoretical model used in probability of profit (PoP) calculations.</p>\n", "default_value": "typing.Literal[&#x27;black-scholes&#x27;, &#x27;array&#x27;]"}, {"fullname": "optionlab.models.Range", "modulename": "optionlab.models", "qualname": "Range", "kind": "variable", "doc": "<p>Range boundaries.</p>\n", "default_value": "tuple[float, float]"}, {"fullname": "optionlab.models.FloatOrNdarray", "modulename": "optionlab.models", "qualname": "FloatOrNdarray", "kind": "variable", "doc": "<p>Float or numpy array custom type.</p>\n", "default_value": "float | numpy.ndarray"}, {"fullname": "optionlab.models.Stock", "modulename": "optionlab.models", "qualname": "Stock", "kind": "class", "doc": "<p>Defines the attributes of a stock leg in a strategy.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.Stock.type", "modulename": "optionlab.models", "qualname": "Stock.type", "kind": "variable", "doc": "<p>It must be <em>'stock'</em>.</p>\n", "annotation": ": Literal[&#x27;stock&#x27;]"}, {"fullname": "optionlab.models.Stock.n", "modulename": "optionlab.models", "qualname": "Stock.n", "kind": "variable", "doc": "<p>Number of shares.</p>\n", "annotation": ": int"}, {"fullname": "optionlab.models.Stock.action", "modulename": "optionlab.models", "qualname": "Stock.action", "kind": "variable", "doc": "<p>Either <em>'buy'</em> or <em>'sell'</em>.</p>\n", "annotation": ": Literal[&#x27;buy&#x27;, &#x27;sell&#x27;]"}, {"fullname": "optionlab.models.Stock.prev_pos", "modulename": "optionlab.models", "qualname": "Stock.prev_pos", "kind": "variable", "doc": "<p>Stock price effectively paid or received in a previously opened position.</p>\n\n<ul>\n<li><p>If positive, the position remains open and the payoff calculation considers\nthis price instead of the current stock price. </p></li>\n<li><p>If negative, the position is closed and the difference between this price \nand the current price is included in the payoff calculation. </p></li>\n</ul>\n\n<p>The default is <code>None</code>, which means this stock position is not a previously \nopened position.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.Stock.model_config", "modulename": "optionlab.models", "qualname": "Stock.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.Stock.model_fields", "modulename": "optionlab.models", "qualname": "Stock.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;type&#x27;: FieldInfo(annotation=Literal[&#x27;stock&#x27;], required=False, default=&#x27;stock&#x27;), &#x27;n&#x27;: FieldInfo(annotation=int, required=True, metadata=[Gt(gt=0)]), &#x27;action&#x27;: FieldInfo(annotation=Literal[&#x27;buy&#x27;, &#x27;sell&#x27;], required=True), &#x27;prev_pos&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None)}"}, {"fullname": "optionlab.models.Stock.model_computed_fields", "modulename": "optionlab.models", "qualname": "Stock.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.Option", "modulename": "optionlab.models", "qualname": "Option", "kind": "class", "doc": "<p>Defines the attributes of an option leg in a strategy.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.Option.type", "modulename": "optionlab.models", "qualname": "Option.type", "kind": "variable", "doc": "<p>Either <em>'call'</em> or <em>'put'</em>.</p>\n", "annotation": ": Literal[&#x27;call&#x27;, &#x27;put&#x27;]"}, {"fullname": "optionlab.models.Option.strike", "modulename": "optionlab.models", "qualname": "Option.strike", "kind": "variable", "doc": "<p>Strike price.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Option.premium", "modulename": "optionlab.models", "qualname": "Option.premium", "kind": "variable", "doc": "<p>Option premium.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Option.action", "modulename": "optionlab.models", "qualname": "Option.action", "kind": "variable", "doc": "<p>Either <em>'buy'</em> or <em>'sell'</em>.</p>\n", "annotation": ": Literal[&#x27;buy&#x27;, &#x27;sell&#x27;]"}, {"fullname": "optionlab.models.Option.n", "modulename": "optionlab.models", "qualname": "Option.n", "kind": "variable", "doc": "<p>Number of options.</p>\n", "annotation": ": int"}, {"fullname": "optionlab.models.Option.prev_pos", "modulename": "optionlab.models", "qualname": "Option.prev_pos", "kind": "variable", "doc": "<p>Premium effectively paid or received in a previously opened position. </p>\n\n<ul>\n<li><p>If positive, the position remains open and the payoff calculation considers\nthis price instead of the current price of the option. </p></li>\n<li><p>If negative, the position is closed and the difference between this price \nand the current price is included in the payoff calculation. </p></li>\n</ul>\n\n<p>The default is <code>None</code>, which means this option position is not a previously \nopened position.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.Option.expiration", "modulename": "optionlab.models", "qualname": "Option.expiration", "kind": "variable", "doc": "<p>Expiration date or number of days remaining to expiration. </p>\n\n<p>The default is <code>None</code>, which means the expiration is the same as <code>Inputs.target_date</code> \nor <code>Inputs.days_to_target_date</code>.</p>\n", "annotation": ": datetime.date | int | None"}, {"fullname": "optionlab.models.Option.model_config", "modulename": "optionlab.models", "qualname": "Option.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.Option.model_fields", "modulename": "optionlab.models", "qualname": "Option.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;type&#x27;: FieldInfo(annotation=Literal[&#x27;call&#x27;, &#x27;put&#x27;], required=True), &#x27;strike&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0)]), &#x27;premium&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0)]), &#x27;action&#x27;: FieldInfo(annotation=Literal[&#x27;buy&#x27;, &#x27;sell&#x27;], required=True), &#x27;n&#x27;: FieldInfo(annotation=int, required=True, metadata=[Gt(gt=0)]), &#x27;prev_pos&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None), &#x27;expiration&#x27;: FieldInfo(annotation=Union[date, int, NoneType], required=False, default=None)}"}, {"fullname": "optionlab.models.Option.model_computed_fields", "modulename": "optionlab.models", "qualname": "Option.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.ClosedPosition", "modulename": "optionlab.models", "qualname": "ClosedPosition", "kind": "class", "doc": "<p>Defines the attributes of a previously closed position in a strategy.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.ClosedPosition.type", "modulename": "optionlab.models", "qualname": "ClosedPosition.type", "kind": "variable", "doc": "<p>It must be <em>'closed'</em>.</p>\n", "annotation": ": Literal[&#x27;closed&#x27;]"}, {"fullname": "optionlab.models.ClosedPosition.prev_pos", "modulename": "optionlab.models", "qualname": "ClosedPosition.prev_pos", "kind": "variable", "doc": "<p>The total amount of the closed position. </p>\n\n<ul>\n<li><p>If positive, it resulted in a profit.</p></li>\n<li><p>If negative, it incurred a loss.</p></li>\n</ul>\n\n<p>This amount will be added to the payoff and taken into account in the strategy \ncalculations.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.ClosedPosition.model_config", "modulename": "optionlab.models", "qualname": "ClosedPosition.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.ClosedPosition.model_fields", "modulename": "optionlab.models", "qualname": "ClosedPosition.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;type&#x27;: FieldInfo(annotation=Literal[&#x27;closed&#x27;], required=False, default=&#x27;closed&#x27;), &#x27;prev_pos&#x27;: FieldInfo(annotation=float, required=True)}"}, {"fullname": "optionlab.models.ClosedPosition.model_computed_fields", "modulename": "optionlab.models", "qualname": "ClosedPosition.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.StrategyLeg", "modulename": "optionlab.models", "qualname": "StrategyLeg", "kind": "variable", "doc": "<p>Leg in a strategy.</p>\n", "default_value": "optionlab.models.Stock | optionlab.models.Option | optionlab.models.ClosedPosition"}, {"fullname": "optionlab.models.TheoreticalModelInputs", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs", "kind": "class", "doc": "<p>Inputs for calculations, such as the probability of profit (PoP).</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.TheoreticalModelInputs.stock_price", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs.stock_price", "kind": "variable", "doc": "<p>Stock price.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.TheoreticalModelInputs.volatility", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs.volatility", "kind": "variable", "doc": "<p>Annualized volatility of the underlying asset.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.TheoreticalModelInputs.years_to_target_date", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs.years_to_target_date", "kind": "variable", "doc": "<p>Time remaining until target date, in years.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.TheoreticalModelInputs.model_config", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.TheoreticalModelInputs.model_fields", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;stock_price&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;volatility&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;years_to_target_date&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)])}"}, {"fullname": "optionlab.models.TheoreticalModelInputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "TheoreticalModelInputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.BlackScholesModelInputs", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs", "kind": "class", "doc": "<p>Defines the input data for the calculations using the Black-Scholes model.</p>\n", "bases": "TheoreticalModelInputs"}, {"fullname": "optionlab.models.BlackScholesModelInputs.model", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs.model", "kind": "variable", "doc": "<p>It must be <em>'black-scholes'</em>.</p>\n", "annotation": ": Literal[&#x27;black-scholes&#x27;]"}, {"fullname": "optionlab.models.BlackScholesModelInputs.interest_rate", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs.interest_rate", "kind": "variable", "doc": "<p>Annualized risk-free interest rate. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.BlackScholesModelInputs.dividend_yield", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs.dividend_yield", "kind": "variable", "doc": "<p>Annualized dividend yield. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.BlackScholesModelInputs.model_config", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.BlackScholesModelInputs.model_fields", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;stock_price&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;volatility&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;years_to_target_date&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)]), &#x27;model&#x27;: FieldInfo(annotation=Literal[&#x27;black-scholes&#x27;], required=False, default=&#x27;black-scholes&#x27;), &#x27;interest_rate&#x27;: FieldInfo(annotation=float, required=False, default=0.0, metadata=[Ge(ge=0.0)]), &#x27;dividend_yield&#x27;: FieldInfo(annotation=float, required=False, default=0.0, metadata=[Ge(ge=0.0), Le(le=1.0)])}"}, {"fullname": "optionlab.models.BlackScholesModelInputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "BlackScholesModelInputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.LaplaceInputs", "modulename": "optionlab.models", "qualname": "LaplaceInputs", "kind": "class", "doc": "<p>Defines the input data for the calculations using a log-Laplace distribution of\nstock prices.</p>\n", "bases": "TheoreticalModelInputs"}, {"fullname": "optionlab.models.LaplaceInputs.model", "modulename": "optionlab.models", "qualname": "LaplaceInputs.model", "kind": "variable", "doc": "<p>It must be '<em>laplace</em>'.</p>\n", "annotation": ": Literal[&#x27;laplace&#x27;]"}, {"fullname": "optionlab.models.LaplaceInputs.mu", "modulename": "optionlab.models", "qualname": "LaplaceInputs.mu", "kind": "variable", "doc": "<p>Annualized return of the underlying asset.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.LaplaceInputs.model_config", "modulename": "optionlab.models", "qualname": "LaplaceInputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.LaplaceInputs.model_fields", "modulename": "optionlab.models", "qualname": "LaplaceInputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;stock_price&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;volatility&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;years_to_target_date&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)]), &#x27;model&#x27;: FieldInfo(annotation=Literal[&#x27;laplace&#x27;], required=False, default=&#x27;laplace&#x27;), &#x27;mu&#x27;: FieldInfo(annotation=float, required=True)}"}, {"fullname": "optionlab.models.LaplaceInputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "LaplaceInputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.ArrayInputs", "modulename": "optionlab.models", "qualname": "ArrayInputs", "kind": "class", "doc": "<p>Defines the input data for the calculations when using an array of strategy\nreturns.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.ArrayInputs.model", "modulename": "optionlab.models", "qualname": "ArrayInputs.model", "kind": "variable", "doc": "<p>It must be <em>'array</em>'.</p>\n", "annotation": ": Literal[&#x27;array&#x27;]"}, {"fullname": "optionlab.models.ArrayInputs.array", "modulename": "optionlab.models", "qualname": "ArrayInputs.array", "kind": "variable", "doc": "<p>Array of strategy returns.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "optionlab.models.ArrayInputs.model_config", "modulename": "optionlab.models", "qualname": "ArrayInputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "optionlab.models.ArrayInputs.model_fields", "modulename": "optionlab.models", "qualname": "ArrayInputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;model&#x27;: FieldInfo(annotation=Literal[&#x27;array&#x27;], required=False, default=&#x27;array&#x27;), &#x27;array&#x27;: FieldInfo(annotation=ndarray, required=True)}"}, {"fullname": "optionlab.models.ArrayInputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "ArrayInputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.Inputs", "modulename": "optionlab.models", "qualname": "Inputs", "kind": "class", "doc": "<p>Defines the input data for a strategy calculation.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.Inputs.stock_price", "modulename": "optionlab.models", "qualname": "Inputs.stock_price", "kind": "variable", "doc": "<p>Spot price of the underlying.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.volatility", "modulename": "optionlab.models", "qualname": "Inputs.volatility", "kind": "variable", "doc": "<p>Annualized volatility.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.interest_rate", "modulename": "optionlab.models", "qualname": "Inputs.interest_rate", "kind": "variable", "doc": "<p>Annualized risk-free interest rate.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.min_stock", "modulename": "optionlab.models", "qualname": "Inputs.min_stock", "kind": "variable", "doc": "<p>Minimum value of the stock in the stock price domain.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.max_stock", "modulename": "optionlab.models", "qualname": "Inputs.max_stock", "kind": "variable", "doc": "<p>Maximum value of the stock in the stock price domain.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.strategy", "modulename": "optionlab.models", "qualname": "Inputs.strategy", "kind": "variable", "doc": "<p>A list of strategy legs.</p>\n", "annotation": ": list[optionlab.models.Stock | optionlab.models.Option | optionlab.models.ClosedPosition]"}, {"fullname": "optionlab.models.Inputs.dividend_yield", "modulename": "optionlab.models", "qualname": "Inputs.dividend_yield", "kind": "variable", "doc": "<p>Annualized dividend yield. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.profit_target", "modulename": "optionlab.models", "qualname": "Inputs.profit_target", "kind": "variable", "doc": "<p>Target profit level. </p>\n\n<p>The default is <code>None</code>, which means it is not calculated.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.Inputs.loss_limit", "modulename": "optionlab.models", "qualname": "Inputs.loss_limit", "kind": "variable", "doc": "<p>Limit loss level. </p>\n\n<p>The default is <code>None</code>, which means it is not calculated.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.Inputs.opt_commission", "modulename": "optionlab.models", "qualname": "Inputs.opt_commission", "kind": "variable", "doc": "<p>Brokerage commission for options transactions. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.stock_commission", "modulename": "optionlab.models", "qualname": "Inputs.stock_commission", "kind": "variable", "doc": "<p>Brokerage commission for stocks transactions. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Inputs.discard_nonbusiness_days", "modulename": "optionlab.models", "qualname": "Inputs.discard_nonbusiness_days", "kind": "variable", "doc": "<p>Discards weekends and holidays when counting the number of days between\ntwo dates. </p>\n\n<p>The default is <code>True</code>.</p>\n", "annotation": ": bool"}, {"fullname": "optionlab.models.Inputs.business_days_in_year", "modulename": "optionlab.models", "qualname": "Inputs.business_days_in_year", "kind": "variable", "doc": "<p>Number of business days in a year. </p>\n\n<p>The default is 252.</p>\n", "annotation": ": int"}, {"fullname": "optionlab.models.Inputs.country", "modulename": "optionlab.models", "qualname": "Inputs.country", "kind": "variable", "doc": "<p>Country whose holidays will be counted if <code>discard_nonbusinessdays</code> is\nset to <code>True</code>. </p>\n\n<p>The default is '<em>US</em>'.</p>\n", "annotation": ": str"}, {"fullname": "optionlab.models.Inputs.start_date", "modulename": "optionlab.models", "qualname": "Inputs.start_date", "kind": "variable", "doc": "<p>Start date in the calculations. </p>\n\n<p>If not provided, <code>days_to_target_date</code> must be provided.</p>\n", "annotation": ": datetime.date | None"}, {"fullname": "optionlab.models.Inputs.target_date", "modulename": "optionlab.models", "qualname": "Inputs.target_date", "kind": "variable", "doc": "<p>Target date in the calculations. </p>\n\n<p>If not provided, <code>days_to_target_date</code> must be provided.</p>\n", "annotation": ": datetime.date | None"}, {"fullname": "optionlab.models.Inputs.days_to_target_date", "modulename": "optionlab.models", "qualname": "Inputs.days_to_target_date", "kind": "variable", "doc": "<p>Days remaining to the target date. </p>\n\n<p>If not provided, <code>start_date</code> and <code>target_date</code> must be provided.</p>\n", "annotation": ": int"}, {"fullname": "optionlab.models.Inputs.model", "modulename": "optionlab.models", "qualname": "Inputs.model", "kind": "variable", "doc": "<p>Theoretical model used in the calculations of probability of profit. </p>\n\n<p>It can be <em>'black-scholes'</em> or <em>'array</em>'.</p>\n", "annotation": ": Literal[&#x27;black-scholes&#x27;, &#x27;array&#x27;]"}, {"fullname": "optionlab.models.Inputs.array", "modulename": "optionlab.models", "qualname": "Inputs.array", "kind": "variable", "doc": "<p>Array of terminal stock prices. </p>\n\n<p>The default is an empty array.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "optionlab.models.Inputs.model_config", "modulename": "optionlab.models", "qualname": "Inputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "optionlab.models.Inputs.model_fields", "modulename": "optionlab.models", "qualname": "Inputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;stock_price&#x27;: FieldInfo(annotation=float, required=True, metadata=[Gt(gt=0.0)]), &#x27;volatility&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)]), &#x27;interest_rate&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)]), &#x27;min_stock&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)]), &#x27;max_stock&#x27;: FieldInfo(annotation=float, required=True, metadata=[Ge(ge=0.0)]), &#x27;strategy&#x27;: FieldInfo(annotation=list[Union[Stock, Option, ClosedPosition]], required=True, metadata=[MinLen(min_length=1)]), &#x27;dividend_yield&#x27;: FieldInfo(annotation=float, required=False, default=0.0, metadata=[Ge(ge=0.0)]), &#x27;profit_target&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None), &#x27;loss_limit&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None), &#x27;opt_commission&#x27;: FieldInfo(annotation=float, required=False, default=0.0), &#x27;stock_commission&#x27;: FieldInfo(annotation=float, required=False, default=0.0), &#x27;discard_nonbusiness_days&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;business_days_in_year&#x27;: FieldInfo(annotation=int, required=False, default=252), &#x27;country&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;US&#x27;), &#x27;start_date&#x27;: FieldInfo(annotation=Union[date, NoneType], required=False, default=None), &#x27;target_date&#x27;: FieldInfo(annotation=Union[date, NoneType], required=False, default=None), &#x27;days_to_target_date&#x27;: FieldInfo(annotation=int, required=False, default=0, metadata=[Ge(ge=0)]), &#x27;model&#x27;: FieldInfo(annotation=Literal[&#x27;black-scholes&#x27;, &#x27;array&#x27;], required=False, default=&#x27;black-scholes&#x27;), &#x27;array&#x27;: FieldInfo(annotation=ndarray, required=False, default_factory=init_empty_array)}"}, {"fullname": "optionlab.models.Inputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "Inputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.BlackScholesInfo", "modulename": "optionlab.models", "qualname": "BlackScholesInfo", "kind": "class", "doc": "<p>Defines the data returned by a calculation using the Black-Scholes model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.BlackScholesInfo.call_price", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.call_price", "kind": "variable", "doc": "<p>Price of a call option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.put_price", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.put_price", "kind": "variable", "doc": "<p>Price of a put option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.call_delta", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.call_delta", "kind": "variable", "doc": "<p>Delta of a call option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.put_delta", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.put_delta", "kind": "variable", "doc": "<p>Delta of a put option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.call_theta", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.call_theta", "kind": "variable", "doc": "<p>Theta of a call option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.put_theta", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.put_theta", "kind": "variable", "doc": "<p>Theta of a put option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.gamma", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.gamma", "kind": "variable", "doc": "<p>Gamma of an option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.vega", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.vega", "kind": "variable", "doc": "<p>Vega of an option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.call_rho", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.call_rho", "kind": "variable", "doc": "<p>Rho of a call option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.put_rho", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.put_rho", "kind": "variable", "doc": "<p>Rho of a put option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.call_itm_prob", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.call_itm_prob", "kind": "variable", "doc": "<p>Probability of expiring in-the-money probability of a call option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.put_itm_prob", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.put_itm_prob", "kind": "variable", "doc": "<p>Probability of expiring in-the-money of a put option.</p>\n", "annotation": ": float | numpy.ndarray"}, {"fullname": "optionlab.models.BlackScholesInfo.model_config", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "optionlab.models.BlackScholesInfo.model_fields", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;call_price&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;put_price&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;call_delta&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;put_delta&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;call_theta&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;put_theta&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;gamma&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;vega&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;call_rho&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;put_rho&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;call_itm_prob&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True), &#x27;put_itm_prob&#x27;: FieldInfo(annotation=Union[float, ndarray], required=True)}"}, {"fullname": "optionlab.models.BlackScholesInfo.model_computed_fields", "modulename": "optionlab.models", "qualname": "BlackScholesInfo.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.Outputs", "modulename": "optionlab.models", "qualname": "Outputs", "kind": "class", "doc": "<p>Defines the output data from a strategy calculation.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.Outputs.probability_of_profit", "modulename": "optionlab.models", "qualname": "Outputs.probability_of_profit", "kind": "variable", "doc": "<p>Probability of the strategy yielding at least $0.01.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Outputs.profit_ranges", "modulename": "optionlab.models", "qualname": "Outputs.profit_ranges", "kind": "variable", "doc": "<p>A list of minimum and maximum stock prices defining ranges in which the\nstrategy makes at least $0.01.</p>\n", "annotation": ": list[tuple[float, float]]"}, {"fullname": "optionlab.models.Outputs.expected_profit", "modulename": "optionlab.models", "qualname": "Outputs.expected_profit", "kind": "variable", "doc": "<p>Expected profit when the strategy is profitable. </p>\n\n<p>The default is <code>None</code>.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.Outputs.expected_loss", "modulename": "optionlab.models", "qualname": "Outputs.expected_loss", "kind": "variable", "doc": "<p>Expected loss when the strategy is not profitable. </p>\n\n<p>The default is <code>None</code>.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.Outputs.per_leg_cost", "modulename": "optionlab.models", "qualname": "Outputs.per_leg_cost", "kind": "variable", "doc": "<p>List of leg costs.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.strategy_cost", "modulename": "optionlab.models", "qualname": "Outputs.strategy_cost", "kind": "variable", "doc": "<p>Total strategy cost.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Outputs.minimum_return_in_the_domain", "modulename": "optionlab.models", "qualname": "Outputs.minimum_return_in_the_domain", "kind": "variable", "doc": "<p>Minimum return of the strategy within the stock price domain.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Outputs.maximum_return_in_the_domain", "modulename": "optionlab.models", "qualname": "Outputs.maximum_return_in_the_domain", "kind": "variable", "doc": "<p>Maximum return of the strategy within the stock price domain.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Outputs.implied_volatility", "modulename": "optionlab.models", "qualname": "Outputs.implied_volatility", "kind": "variable", "doc": "<p>List of implied volatilities, one per strategy leg.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.in_the_money_probability", "modulename": "optionlab.models", "qualname": "Outputs.in_the_money_probability", "kind": "variable", "doc": "<p>List of probabilities of legs expiring in-the-money (ITM).</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.delta", "modulename": "optionlab.models", "qualname": "Outputs.delta", "kind": "variable", "doc": "<p>List of Delta values, one per strategy leg.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.gamma", "modulename": "optionlab.models", "qualname": "Outputs.gamma", "kind": "variable", "doc": "<p>List of Gamma values, one per strategy leg.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.theta", "modulename": "optionlab.models", "qualname": "Outputs.theta", "kind": "variable", "doc": "<p>List of Theta values, one per strategy leg.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.vega", "modulename": "optionlab.models", "qualname": "Outputs.vega", "kind": "variable", "doc": "<p>List of Vega values, one per strategy leg.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.rho", "modulename": "optionlab.models", "qualname": "Outputs.rho", "kind": "variable", "doc": "<p>List of Rho values, one per strategy leg.</p>\n", "annotation": ": list[float]"}, {"fullname": "optionlab.models.Outputs.probability_of_profit_target", "modulename": "optionlab.models", "qualname": "Outputs.probability_of_profit_target", "kind": "variable", "doc": "<p>Probability of the strategy yielding at least the profit target. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Outputs.profit_target_ranges", "modulename": "optionlab.models", "qualname": "Outputs.profit_target_ranges", "kind": "variable", "doc": "<p>List of minimum and maximum stock prices defining ranges in which the\nstrategy makes at least the profit target. </p>\n\n<p>The default is [].</p>\n", "annotation": ": list[tuple[float, float]]"}, {"fullname": "optionlab.models.Outputs.probability_of_loss_limit", "modulename": "optionlab.models", "qualname": "Outputs.probability_of_loss_limit", "kind": "variable", "doc": "<p>Probability of the strategy losing at least the loss limit. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.Outputs.loss_limit_ranges", "modulename": "optionlab.models", "qualname": "Outputs.loss_limit_ranges", "kind": "variable", "doc": "<p>List of minimum and maximum stock prices defining ranges where the\nstrategy loses at least the loss limit. </p>\n\n<p>The default is [].</p>\n", "annotation": ": list[tuple[float, float]]"}, {"fullname": "optionlab.models.Outputs.model_config", "modulename": "optionlab.models", "qualname": "Outputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.Outputs.model_fields", "modulename": "optionlab.models", "qualname": "Outputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;probability_of_profit&#x27;: FieldInfo(annotation=float, required=True), &#x27;profit_ranges&#x27;: FieldInfo(annotation=list[tuple[float, float]], required=True), &#x27;expected_profit&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None), &#x27;expected_loss&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None), &#x27;per_leg_cost&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;strategy_cost&#x27;: FieldInfo(annotation=float, required=True), &#x27;minimum_return_in_the_domain&#x27;: FieldInfo(annotation=float, required=True), &#x27;maximum_return_in_the_domain&#x27;: FieldInfo(annotation=float, required=True), &#x27;implied_volatility&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;in_the_money_probability&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;delta&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;gamma&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;theta&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;vega&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;rho&#x27;: FieldInfo(annotation=list[float], required=True), &#x27;probability_of_profit_target&#x27;: FieldInfo(annotation=float, required=False, default=0.0), &#x27;profit_target_ranges&#x27;: FieldInfo(annotation=list[tuple[float, float]], required=False, default=[]), &#x27;probability_of_loss_limit&#x27;: FieldInfo(annotation=float, required=False, default=0.0), &#x27;loss_limit_ranges&#x27;: FieldInfo(annotation=list[tuple[float, float]], required=False, default=[]), &#x27;inputs&#x27;: FieldInfo(annotation=Inputs, required=True), &#x27;data&#x27;: FieldInfo(annotation=EngineDataResults, required=True)}"}, {"fullname": "optionlab.models.Outputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "Outputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.models.PoPOutputs", "modulename": "optionlab.models", "qualname": "PoPOutputs", "kind": "class", "doc": "<p>Defines the output data from a probability of profit (PoP) calculation.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "optionlab.models.PoPOutputs.probability_of_reaching_target", "modulename": "optionlab.models", "qualname": "PoPOutputs.probability_of_reaching_target", "kind": "variable", "doc": "<p>Probability that the strategy return will be equal or greater than the\ntarget. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.PoPOutputs.probability_of_missing_target", "modulename": "optionlab.models", "qualname": "PoPOutputs.probability_of_missing_target", "kind": "variable", "doc": "<p>Probability that the strategy return will be less than the target. </p>\n\n<p>The default is 0.0.</p>\n", "annotation": ": float"}, {"fullname": "optionlab.models.PoPOutputs.reaching_target_range", "modulename": "optionlab.models", "qualname": "PoPOutputs.reaching_target_range", "kind": "variable", "doc": "<p>Range of stock prices where the strategy return is equal or greater than\nthe target. </p>\n\n<p>The default is [].</p>\n", "annotation": ": list[tuple[float, float]]"}, {"fullname": "optionlab.models.PoPOutputs.missing_target_range", "modulename": "optionlab.models", "qualname": "PoPOutputs.missing_target_range", "kind": "variable", "doc": "<p>Range of stock prices where the strategy return is less than the target.</p>\n\n<p>The default is [].</p>\n", "annotation": ": list[tuple[float, float]]"}, {"fullname": "optionlab.models.PoPOutputs.expected_return_above_target", "modulename": "optionlab.models", "qualname": "PoPOutputs.expected_return_above_target", "kind": "variable", "doc": "<p>Expected value of the strategy return when the return is equal or greater\nthan the target. </p>\n\n<p>The default is <code>None</code>.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.PoPOutputs.expected_return_below_target", "modulename": "optionlab.models", "qualname": "PoPOutputs.expected_return_below_target", "kind": "variable", "doc": "<p>Expected value of the strategy return when the return is less than the\ntarget. </p>\n\n<p>The default is <code>None</code>.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "optionlab.models.PoPOutputs.model_config", "modulename": "optionlab.models", "qualname": "PoPOutputs.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "optionlab.models.PoPOutputs.model_fields", "modulename": "optionlab.models", "qualname": "PoPOutputs.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;probability_of_reaching_target&#x27;: FieldInfo(annotation=float, required=False, default=0.0), &#x27;probability_of_missing_target&#x27;: FieldInfo(annotation=float, required=False, default=0.0), &#x27;reaching_target_range&#x27;: FieldInfo(annotation=list[tuple[float, float]], required=False, default=[]), &#x27;missing_target_range&#x27;: FieldInfo(annotation=list[tuple[float, float]], required=False, default=[]), &#x27;expected_return_above_target&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None), &#x27;expected_return_below_target&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=None)}"}, {"fullname": "optionlab.models.PoPOutputs.model_computed_fields", "modulename": "optionlab.models", "qualname": "PoPOutputs.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "optionlab.plot", "modulename": "optionlab.plot", "kind": "module", "doc": "<p>This module implements the <code>plot_pl</code> function, which displays the profit/loss diagram \nof an options trading strategy.</p>\n"}, {"fullname": "optionlab.plot.plot_pl", "modulename": "optionlab.plot", "qualname": "plot_pl", "kind": "function", "doc": "<p>Displays the strategy's profit/loss diagram.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>outputs</code>: output data from a strategy calculation with <code>optionlab.engine.run_strategy</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>None</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Outputs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.price_array", "modulename": "optionlab.price_array", "kind": "module", "doc": "<p>This module defines the <code>create_price_array</code> function, which calculates terminal \nprices from numerical simulations of multiple stock paths.</p>\n\n<p>The terminal price array can later be used to calculate the probability of profit \n(PoP) of a strategy using the <code>optionlab.engine.run_strategy</code> function.</p>\n"}, {"fullname": "optionlab.price_array.create_price_array", "modulename": "optionlab.price_array", "qualname": "create_price_array", "kind": "function", "doc": "<p>Generates terminal stock prices.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>inputs_data</code>: input data used to generate the terminal stock prices.</p>\n\n<p><code>n</code>: number of terminal stock prices.</p>\n\n<p><code>seed</code>: seed for random number generation.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Array of terminal prices.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inputs_data</span><span class=\"p\">:</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BlackScholesModelInputs</span> <span class=\"o\">|</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">LaplaceInputs</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.support", "modulename": "optionlab.support", "kind": "module", "doc": "<p>This module implements a number of helper functions that are not intended to be \ncalled directly by users, but rather support functionalities within the \n<code>optionlab.engine.run_strategy</code> function.</p>\n"}, {"fullname": "optionlab.support.get_pl_profile", "modulename": "optionlab.support", "qualname": "get_pl_profile", "kind": "function", "doc": "<p>Returns the profit/loss profile and cost of an options trade at expiration.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>action</code>: either <em>'buy'</em> or <em>'sell'</em>.</p>\n\n<p><code>x</code>: strike price.</p>\n\n<p><code>val</code>: option price.</p>\n\n<p><code>n</code>: number of options.</p>\n\n<p><code>s</code>: array of stock prices.</p>\n\n<p><code>commission</code>: brokerage commission.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Profit/loss profile and cost of an option trade at expiration.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;buy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sell&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.support.get_pl_profile_stock", "modulename": "optionlab.support", "qualname": "get_pl_profile_stock", "kind": "function", "doc": "<p>Returns the profit/loss profile and cost of a stock position.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s0</code>: initial stock price.</p>\n\n<p><code>action</code>: either <em>'buy'</em> or <em>'sell'</em>.</p>\n\n<p><code>n</code>: number of shares.</p>\n\n<p><code>s</code>: array of stock prices.</p>\n\n<p><code>commission</code>: brokerage commission.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Profit/loss profile and cost of a stock position.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;buy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sell&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.support.get_pl_profile_bs", "modulename": "optionlab.support", "qualname": "get_pl_profile_bs", "kind": "function", "doc": "<p>Returns the profit/loss profile and cost of an options trade on a target date\nbefore expiration using the Black-Scholes model for option pricing.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>option_type</code>: either <em>'call'</em> or <em>'put'</em>.</p>\n\n<p><code>action</code>: either <em>'buy'</em> or <em>'sell'</em>.</p>\n\n<p><code>x</code>: strike price.</p>\n\n<p><code>val</code>: initial option price.</p>\n\n<p><code>r</code>: annualized risk-free interest rate.</p>\n\n<p><code>target_to_maturity_years</code>: time remaining to maturity from the target date,\nin years.</p>\n\n<p><code>volatility</code>: annualized volatility of the underlying asset.</p>\n\n<p><code>n</code>: number of options.</p>\n\n<p><code>s</code>: array of stock prices.</p>\n\n<p><code>y</code>: annualized dividend yield.</p>\n\n<p><code>commission</code>: brokerage commission.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Profit/loss profile and cost of an option trade before expiration.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">option_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;call&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;put&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;buy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sell&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">target_to_maturity_years</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">volatility</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">commission</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.support.create_price_seq", "modulename": "optionlab.support", "qualname": "create_price_seq", "kind": "function", "doc": "<p>Generates a sequence of stock prices from a minimum to a maximum price with\nincrement $0.01.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>min_price</code>: minimum stock price in the range.</p>\n\n<p><code>max_price</code>: maximum stock price in the range.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Array of sequential stock prices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">min_price</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">max_price</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.support.get_pop", "modulename": "optionlab.support", "qualname": "get_pop", "kind": "function", "doc": "<p>Estimates the probability of profit (PoP) of an options trading strategy.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>s</code>: array of stock prices.</p>\n\n<p><code>profit</code>: array of profits and losses.</p>\n\n<p><code>inputs_data</code>: input data used to estimate the probability of profit.</p>\n\n<p><code>target</code>: target return.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Outputs of a probability of profit (PoP) calculation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">profit</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_data</span><span class=\"p\">:</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BlackScholesModelInputs</span> <span class=\"o\">|</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ArrayInputs</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span></span><span class=\"return-annotation\">) -> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PoPOutputs</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.utils", "modulename": "optionlab.utils", "kind": "module", "doc": "<p>This module defines utility functions.</p>\n"}, {"fullname": "optionlab.utils.get_nonbusiness_days", "modulename": "optionlab.utils", "qualname": "get_nonbusiness_days", "kind": "function", "doc": "<p>Returns the number of non-business days (i.e., weekends and holidays) between\nthe start and end date.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>start_date</code>: start date.</p>\n\n<p><code>end_date</code>: end date.</p>\n\n<p><code>country</code>: country of the stock exchange.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Number of weekends and holidays between the start and end date.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>,</span><span class=\"param\">\t<span class=\"n\">country</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;US&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.utils.get_pl", "modulename": "optionlab.utils", "qualname": "get_pl", "kind": "function", "doc": "<p>Returns the stock prices and the corresponding profit/loss profile of either\na leg or the whole strategy.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>outputs</code>: output data from a strategy calculation.</p>\n\n<p><code>leg</code>: index of a strategy leg. The default is <code>None</code>, which means the whole\nstrategy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Array of stock prices and array or profits/losses.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Outputs</span>,</span><span class=\"param\">\t<span class=\"n\">leg</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "optionlab.utils.pl_to_csv", "modulename": "optionlab.utils", "qualname": "pl_to_csv", "kind": "function", "doc": "<p>Saves the stock prices and corresponding profit/loss profile of either a leg\nor the whole strategy to a CSV file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>outputs</code>: output data from a strategy calculation.</p>\n\n<p><code>filename</code>: name of the CSV file.</p>\n\n<p><code>leg</code>: index of a strategy leg. The default is <code>None</code>, which means the whole\nstrategy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>None</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">optionlab</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Outputs</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pl.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">leg</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();